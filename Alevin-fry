#----HAVE TO GET ALEVIN-FRY AT https://anaconda.org/bioconda/alevin-fry/files
tar -xf linux-64_alevin-fry-0.8.2-h4ac6f70_0.tar.bz2
cd linux-64_alevin-fry-0.8.2-h4ac6f70_0/

#-----get reference 10xgenome
wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz
tar xzf refdata-gex-GRCh38-2020-A.tar.gz

#---go into refdata-gex-GRCh38-2020-A folder
#----build gffread
git clone https://github.com/gpertea/gffread
cd gffread
make release

#----extract transcriptome
gffread -w refdata-gex-GRCh38-2020-A/transcriptome.fa -g refdata-gex-GRCh38-2020-A/fasta/genome.fa refdata-gex-GRCh38-2020-A/genes/genes.gtf

#-----build the index-- max threads is 7
salmon index -t refdata-gex-GRCh38-2020-A/transcriptome.fa -i grch38_idx 

#---generate transcript to gene file
awk '{if($3=="transcript") {OFS="\t"; print $14, $10} }' genes.gtf | sed 's/[;\"]//g' > t2g.tsv

#-----------------START HERE IF YOU HAVE INDEX

export PATH=/home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/bin:$PATH

#---map reads to index
salmon alevin -i /home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/refdata-gex-GRCh38-2020-A/index/grch38_idx -p 16 -l IU --chromiumV3 --sketch -1 /home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/refdata-gex-GRCh38-2020-A/pbmc_10k_v3_fastqs/pbmc_10k_v3_S1_L001_R1_001.fastq.gz -2 /home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/refdata-gex-GRCh38-2020-A/pbmc_10k_v3_fastqs/pbmc_10k_v3_S1_L001_R2_001.fastq.gz -o pbmc_10k_v3_map

#---generate a permit list of barcodes
alevin-fry generate-permit-list -d fw -k -i *./pbmc_10k_v3_map -o pbmc_10k_v3_quant

#---collate files
alevin-fry collate -t 16 -i *./pbmc_10k_v3_quant -r *./pbmc_10k_v3_map

#---quantify UMIs per-gene and per-cell
alevin-fry quant -t 16 -i /home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/refdata-gex-GRCh38-2020-A/pbmc_10k_v3_quant -o /home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/refdata-gex-GRCh38-2020-A/pbmc_10k_v3_quant --tg-map /home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon/refdata-gex-GRCh38-2020-A/t2g.tsv --resolution cr-like --use-mtx

#---make features.tsv in using biomaRt
#----replace all empty fields with NA in file
#---------------------------------------------------------------------------------------------------------------------
library(biomaRt)
library(dplyr)
library(readr)
setwd('/home/deviancedev/Desktop/drive_jan2024/Alevin_Salmon')
matrix <- read.csv('features.csv',header = FALSE)
dim(matrix)
colnames(matrix)[1]<-'Gene'
#---set host to https://useast.ensembl.org or https://uswest.ensembl.org
#---------------------------------------------------------------------
Sys.setenv("http_proxy"="http://my.proxy.org:9999")
listMarts()
ensembl=useMart("ensembl")
listDatasets(ensembl)
ensembl=useDataset("hsapiens_gene_ensembl",mart = ensembl)
filters = listFilters(ensembl)
attributes=listAttributes(ensembl)
#-----------------------------------------------------------------
dim(matrix)
geneid <- matrix$Gene
head(geneid)
dim(geneid)
listFilters(ensembl)
listAttributes(ensembl)
genes <-getBM(attributes = c('ensembl_gene_id','external_gene_name'),
              filters = 'ensembl_gene_id',
              values = geneid,
              mart = ensembl,
              uniqueRows = FALSE)
head(genes)
colnames(genes)[1]<-'Gene'
MATRIX<-merge(matrix,genes,by='Gene',all=TRUE)
MATRIX$external_gene_name<-sub("^$","NA",MATRIX$external_gene_name)

write_tsv(MATRIX,file='pilot_features.tsv')
break
#---------------------------------------------------------------------------------------------------------------
#---Be sure to transpose the sparse matrix in seurat

matrix <- ReadMtx(mtx= matrix_path, features = features_path, cells= barcodes_path,mtx.transpose = TRUE)

#---all good...?






